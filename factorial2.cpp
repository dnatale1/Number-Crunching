
/*                      factorial2.cpp

   Author: David Galilei Natale

   Last edited: October 2023

   Ran program on the Intel Developer Cloud.

   Used Intel C++ compiler 2021.10.0.

   Running on Intel's i9-11900K CPU at 3.5 GHz, this program can            
   approximate 46 billion! in 47 seconds. This is a 5411-fold increase in 
   speed compared to a similar program I ran on a VAX computer back in 1992.

   Compiled with:
   icpc -O3 factorial2.cpp -o proj2main [Enter]
   ./proj2main

                                                                           */

#include <iostream>
#include <cstdlib>
#include <iomanip>
#include <sys/timeb.h>
#include <ctime>
#include <cfloat>

using namespace std;

//This constant is 1e+4900.
const long double UPPER_THRESHOLD = (LDBL_MAX/1.18973149535723177)/1e+32;


void getTime(time_t *, struct timeb *);
void factorial(long long);
void displayTimes(time_t *, time_t *, struct timeb *, struct timeb *);

int main()
{
      long long num = 0;
      struct timeb  startTimeW, endTimeW;
      time_t startTimeC, endTimeC;

      cout<<"\nENTER A WHOLE NUMBER: ";
      cin>>num;

      getTime(&startTimeC, &startTimeW);

      factorial(num);

      getTime(&endTimeC, &endTimeW);

      displayTimes(&startTimeC, &endTimeC, &startTimeW, &endTimeW);

      return 0;
} //end main


void getTime(time_t *cpuTime, struct timeb *wallClockTime)
{
   //get wall-clock time
   ftime(wallClockTime);

   //get cpu time
   time(cpuTime);
}

void factorial(long long n)
{

  long long x = 1;
  long double y = 1;

  //variable to keep track of the # of "e+4900"s in the factorial calculation
  long long eCounter = 0;

  /* Variable to calculate the correct "e+(number)" for answers greater than
     10 to the 4900th power. */
  long long eNumber = 0;

  for(x = 1; x <= n; x++)
  {
    y *= x;
    if(y > UPPER_THRESHOLD)
    {
      y /= UPPER_THRESHOLD;
      eCounter++;
    }
  }

   //if answer is <= 10 to the 4900th power
   if(eCounter == 0)
       cout<<"\n"<<setprecision(4900)<<n<<"! = "<<y<<endl;
   else
   {
       eNumber = eCounter * 4900;
       cout<<"\n"<<setprecision(4900)<<n<<"! = "<<y<<" e+"
           <<eNumber<<endl;
   }

}

void displayTimes(time_t *startCPU, time_t *endCPU, struct timeb *startWall, 
                  struct timeb *endWall)
{
  cout<<"\nWall-clock time = "<<(endWall->time - startWall->time)<<" seconds\n";
  cout<<"CPU time = "<<(*endCPU - *startCPU)<<" seconds\n\n";
}



/*                               SAMPLE RUN:


7000000000000! = 71888734652012084075536175901398434170396372862467695197030776262362647918627251477896362573151054446311980346382423907767225187571548174143779619358835967910542910864579614298709351790657124154181940175647544840132007452360902949466703368914704917311382495894514831995177768212811427723321400052319597356974864064183311963435249410859891632392384358048974542056749648716733120801795131120645330424445076880031239915154946569455117084530045072808511849613481527531452960544353118251686338666798732347894911134253681923616561620877864282414762363921521407067466472045135512928573994373844464340187981000745353977284583822404679623756929542253887410063833495616198705036151283195738114556711273067467418778526148328519833154966774194464703581694745551116231271278008940654112082540435225974655120545429565903857029241917806593664229827581955098866821624020903556335596522119516944485200237249641331797560620153372395392424055826554467014421239869954259848953886402493554754749531780608265900025689866826710164232553481472158575032300857176139482304016578484778431916649080697313898025628764953982405058197059847816098755034181462064089179082507923885580661594612621828491601319927073885078257346635140262791050578732186663019720188601281274376215289100566309935836755513520066367686019617579793380802385553771151384139916973867490647079433328514918386427628156928621557047146257305508187959814998404093490223990620467077970532369141515816066217665432602355314695964218210921376694646613426382724273589036064783898716619343624914131721423536865889944717121090819216326790244323428256565902153207690332162149665545411599987754796374783025047159712700636395417282967878660100017142131058264888042050340763689022713066002225555000422584300788545162639985086711976228535154852939727341565655312491033754237636117559482363537551204211946944994439303491282798363630120941400103808565134706864917218357072624993320456676627460386049432894095455650675744944980617151159036617161946608934172792412614739942050053634604442552977574055859172688967942993071850900428563971775089143068475509865671781987399245319860302954862547874550902703562457794257319040506486329681318109595710384918121954985741560594976919373113340847697662972614270892222972052469657100764068512748789124887012868015749410798031261719949825993557367486367537129634014012941194761294721246700682902694344165411546242244454252731714935530118855941113041541924857396096631003646432796437509388253396320098730692438564885528429258772245985988337445236693755338897132847363002717254677124580539963495080642164971670691158774715630758481359270532721842587025076951071303938702015833263901294352102359202270722081048175124121111815079265204412140946277780015144933637749985074760696850272512813725030802099821144351184917813673236779080061758855615723861423479125153404864322330520948179804552380197701438080328960118555579568058932384838955223394590692851387184477772768289338142503787785271129703125803376864496502835643879716877984837516539095656380341077402127899727181109667542429928788242007251160066487190390221481055311688303758268974608580485957811280934216372057293543917922079745024756852987967367199236069615759983725622324290815589899533785647591702734860730659655184281216296616525378196380156397832428406582314629540256247560178953530944669333775207970665156179536082326889959624494682494735223876926551209770307829803938959866512687992211120868286571143902021112772050578333117532857880870830773856780954436419702244825858478464329623377689286974600500218812388688529314820515411438266966235973706404302104582885998592 e+86875624903200


Wall-clock time = 7127 seconds
CPU time = 7127 seconds

*/
